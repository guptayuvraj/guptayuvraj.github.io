<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Software on Blog </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://guptayuvraj.github.io/categories/software/</link>
    <language>en-us</language>
    <author>Yuvraj Gupta</author>
    
    <updated>Tue, 12 Apr 2016 00:00:00 UTC</updated>
    
    <item>
      <title>Understanding about EMC Vipr- All in One</title>
      <link>http://guptayuvraj.github.io/post/EMC-Vipr/</link>
      <pubDate>Tue, 12 Apr 2016 00:00:00 UTC</pubDate>
      <author>Yuvraj Gupta</author>
      <guid>http://guptayuvraj.github.io/post/EMC-Vipr/</guid>
      <description>&lt;p&gt;EMC ViPR will purely provide the Control Plane. It discovers storage, creates virtual storage pools, and provisions those pools to the application. Only by separating the data center from its underlying hardware can IT truly deliver resources as customizable, on-demand services. ViPR is able to support IT services in a heterogeneous storage environment while retaining and extending the value of underlying arrays. It perform functions like “in-place” analytics. Abstracting, pooling and automating the infrastructure. It supports open API including Amazon Simple storage service (S3), Open stack Swift &amp;amp; Atmos to completely free data and applications from storage dependencies.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benefits:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Managing both storage infrastructure (called the Control Plane) and the data stored within that infrastructure (called the Data Plane).&lt;/li&gt;
&lt;li&gt;Decoupling the Control Plane from the Data Plane, allowing the use of both together — or enabling customers to use only the Control Plane to manage the underlying intelligence of the storage arrays through policy-based automation. This is a radical departure from prior attempts to virtualize storage.&lt;/li&gt;
&lt;li&gt;Offering the ability to view objects as files and provides file access performance without the latency inherent to object storage.&lt;/li&gt;
&lt;li&gt;Providing the capability to be implemented entirely in software and will run against EMC, non-EMC and commodity hardware.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;../images/EMC-Vipr.jpg&#34; alt=&#34;&#34; title=&#34;EMC Vipr&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What is Software Defined Storage</title>
      <link>http://guptayuvraj.github.io/post/What-is-Software-Defined-Storage/</link>
      <pubDate>Mon, 11 Apr 2016 00:00:00 UTC</pubDate>
      <author>Yuvraj Gupta</author>
      <guid>http://guptayuvraj.github.io/post/What-is-Software-Defined-Storage/</guid>
      <description>&lt;p&gt;The concept behind software-defined storage seems very appealing: a single point of data services, like volume management and snapshots, form a single console while using &lt;strong&gt;practically anyone’s disk hardware.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As a pillar in the SDDC stack, Software Defined Storage (SDS) pools hardware storage resources and allows them to be programmatically defined in software. All the programming that controls storage-related tasks exists solely in software. The software could exist on a server or could be part of an operating system (OS) or a hypervisor. Provides flexible management at a much more granular level. Deployed Provision through S/W.&lt;/p&gt;

&lt;p&gt;SDS forms a part of a broader software-defined data center (SDDC) concept wherein all the virtualized storage, server, networking and security resources required by an application can be defined by software and provisioned automatically. This design provides the means for storage services to be deployed on a wide range of hardware spanning vendor optimized to commodity to cloud.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
